#!/usr/bin/env python

"""process_template doc string"""

from __future__ import print_function

from argparse import ArgumentParser
import os

from p4_templates.kernel.create_depot import create_depot
from p4_templates.kernel.create_stream import create_stream
from p4_templates.kernel.create_group import create_group
from p4_templates.kernel.create_user import create_user
from p4_templates.kernel.create_branch import (
    create_branch,
    populate_branch,
    delete_branch,
)
from p4_templates.kernel.edit_permissions import append_new_protections
from p4_templates.kernel.edit_typemap import append_new_typemap_entry
from p4_templates.kernel.utils import (
    read_json,
    gather_parameters,
    substitute_parameters,
    gather_existing_template_names,
    load_server_config,
    setup_server_connection,
)


def process_template(template, server, dryrun=False):
    append_new_typemap_entry(template.get("types", {}), server, dryrun=dryrun)

    append_new_protections(template.get("protections", []), server, dryrun=dryrun)

    users = template.get("users", [])
    depots = template.get("depots", [])
    groups = template.get("groups", [])
    streams = template.get("streams", [])
    branches = template.get("branches", [])

    if dryrun and users:
        print("=" * 40)
        print("Projected Users to be created:")

    for user in users:
        create_user(
            server,
            name=user["name"],
            email=user.get("email"),
            full_name=user.get("full_name"),
            job_view=user.get("job_view"),
            auth_method=user.get("auth_method"),
            reviews=user.get("reviews"),
            dryrun=dryrun,
        )

    if dryrun and users:
        print("=" * 40)

    if dryrun and depots:
        print("=" * 40)
        print("Projected Depots to be created:")

    for depot in depots:
        create_depot(
            server,
            depot_name=depot["name"],
            depot_type=depot.get("type", "stream"),
            stream_depth=depot.get("depth", "1"),
            dryrun=dryrun,
        )

    if dryrun and depots:
        print("=" * 40)

    if dryrun and groups:
        print("=" * 40)
        print("Projected Groups to be created:")

    for group in groups:
        create_group(
            server,
            group_name=group["name"],
            description=group.get("description", "Autogenerated template group"),
            max_results=group.get("max_results"),
            max_scan_rows=group.get("max_scan_rows"),
            max_lock_time=group.get("max_lock_time"),
            max_open_files=group.get("max_open_files"),
            max_memory=group.get("max_memory"),
            timeout=group.get("timeout"),
            password_timeout=group.get("password_timeout"),
            subgroups=group.get("subgroups"),
            owners=group.get("owners"),
            users=group.get("users"),
            dryrun=dryrun,
        )

    if dryrun and groups:
        print("=" * 40)

    if dryrun and streams:
        print("=" * 40)
        print("Projected Streams to be created:")

    for stream in streams:
        create_stream(
            server,
            depot_name=stream["depot"],
            stream_name=stream["name"],
            stream_type=stream.get("type", "mainline"),
            user_name=stream.get("user", os.getenv("P4USER")),
            parent_view=stream.get("view"),
            parent_stream=stream.get("parent"),
            options=stream.get("options"),
            paths=stream.get("paths"),
            remapped=stream.get("remapped"),
            ignored=stream.get("ignored"),
            dryrun=dryrun,
        )

    if dryrun and streams:
        print("=" * 40)

    if dryrun and branches:
        print("=" * 40)
        print("Projected branch mappings to be executed:")

    for branch in branches:
        create_branch(
            server,
            branch_name=branch["name"],
            view=branch["view"],
            options=branch.get("options", ["unlocked"]),
            owner=branch.get("owner", os.getenv("P4USER")),
            dryrun=dryrun,
        )
        if not dryrun:
            populate_branch(server, branch["name"])

            delete_branch(server, branch["name"])

    if dryrun and branches:
        print("=" * 40)


def get_template_preset(preset_name, template_folder="../templates"):
    template_lut = gather_existing_template_names(template_folder)
    return template_lut.get(preset_name, "")


def main():
    parser = ArgumentParser()
    parser.add_argument("-t", "--template", default="")
    parser.add_argument("-n", "--name", default="")
    parser.add_argument("-p", "--parameters", nargs="*", default="")
    parser.add_argument("-d", "--dryrun", action="store_true")
    parser.add_argument("-c", "--config", default="../config.json")

    parsed_args = parser.parse_args()

    script_dir = os.path.dirname(__file__)
    os.chdir(script_dir)

    dryrun = 0
    template = None
    if parsed_args.dryrun:
        dryrun = 1

    template = None
    if parsed_args.template:
        template_filename = parsed_args.template
    elif parsed_args.name:
        template_filename = get_template_preset(parsed_args.name)
    else:
        template_filename = ""

    if template_filename and os.path.isfile(template_filename):
        template = read_json(template_filename)

    if template:
        given_parameters = {}
        if parsed_args.parameters:
            for pairing in parsed_args.parameters:
                key, value = pairing.split(":")
                given_parameters[key] = value

        needed_parameters = set(gather_parameters(template))

        if not needed_parameters.issubset(set(given_parameters.keys())):
            print(
                "Could not proceed. Not all needed parameters for the provided template have given values.",
                "\nThe missing parameter keys are:",
            )
            [print(_) for _ in needed_parameters if _ not in given_parameters.keys()]
        else:
            template = substitute_parameters(template, given_parameters)

            print("Connecting to server:")
            p4_connection = setup_server_connection(
                **load_server_config(parsed_args.config)['server']
            )
            print(p4_connection)

            print("Processing template:", template_filename)
            print("parameters", given_parameters, "\n")
            process_template(template, p4_connection, dryrun)
    else:
        print("Template not found", parsed_args.name, template_filename)


if __name__ == "__main__":
    main()